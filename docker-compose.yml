version: '3.8'

services:
  # TypeScript Strategy Consulting Service
  strategy-service:
    build:
      context: .
      dockerfile: Dockerfile.service
    container_name: strategy-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - USE_DEMO=true  # Set to false to use real Claude API
      - PORT=3001
      # Add these for production mode:
      # - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # - CLAUDE_CODE_OAUTH_TOKEN=${CLAUDE_CODE_OAUTH_TOKEN}
    networks:
      - ag2-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  # AG2 Python Orchestrator (example - uncomment to run)
  # ag2-orchestrator:
  #   build:
  #     context: ./ag2_integration
  #     dockerfile: Dockerfile
  #   container_name: ag2-orchestrator
  #   depends_on:
  #     strategy-service:
  #       condition: service_healthy
  #   environment:
  #     - STRATEGY_SERVICE_URL=http://strategy-service:3001
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}  # For other AG2 agents
  #   networks:
  #     - ag2-network
  #   volumes:
  #     - ./ag2_integration:/app
  #     - ./output:/app/output
  #   command: python orchestrator.py

  # Optional: Nginx reverse proxy for production
  # nginx:
  #   image: nginx:alpine
  #   container_name: ag2-proxy
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #   depends_on:
  #     - strategy-service
  #   networks:
  #     - ag2-network

networks:
  ag2-network:
    driver: bridge

volumes:
  logs:
  output: